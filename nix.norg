* Command
** Tips
   - `nix flake lock --update-input <input> --commit-lock-file` updates single input.
   -- (=) was replaced with `nix flake update --update-input` in 2.19
** Changelog
*** 2.19
    - (x) {https://nixos.org/manual/nix/stable/release-notes/rl-2.19}[notes].
    - `repl-flake` now a part of `flake`.
    - `flake#.attr` - preceding dot means not to look for attribute in default locations like `packages`.
    - `{:nix/builtins:# convertHash}
    - `fetch-tree` experimental feature in {:nix/builtins:}.
    - `nix flake update` supports `--update-input` but without flags, taking on the role of `nix flake lock`. Example: `nix flake update nixpkgs --flake /etc/flake`.
    -- `--update-input` consequently was removed.
    - `nix store add` - add file or dir to store and print its path.

* Functions
  - {:mkShell:}
* Configuration
 See {:config:}
** Colors
   {:stylix:}
   {:nix-colors:}
** Services
   {https://search.nixos.org/options?channel=23.11&from=0&size=50&sort=relevance&type=packages&query=systemd.services.%3Cname%3E}[Options].
   Most important options:
   - `wants` vs `requires` - first create dependencies, but in the first case dependency is weak and referrer won't be affected by a referenced exiting.
   - `wantedBy` - makes service runnable.
   - `script` - what to do.
   - `environment` - drop your env here.
   - `serviceConfig`
   -- ( ) {https://www.freedesktop.org/software/systemd/man/latest/systemd.service.html}[Reference 1].
   -- ( ) {https://www.freedesktop.org/software/systemd/man/latest/systemd.exec.html}[Reference 2].
   -- `User` - who to run as.
   -- `Type` - type.
   --- ( ) {https://www.freedesktop.org/software/systemd/man/latest/systemd.service.html#Options}[Reference].
   --- `dbus` for dbus dependency, waits for unit to listen on a bus.
   --- `simple` - simplest, does least checks.
   --- `exec` - like simple, but makes little more checks. Preferrable for longer services without dbus or notify interface.
   --- `forking` - discouraged.
   --- `oneshot` - *default* waits for child to exit, i.e. the most demanding.
   --- etc.
   -- `RootDirectory` - dir to chroot into. e.g. `/run/myService`.
   -- `*Directory` - sets pwd, env, adds dependencies on mounts.
   --- `WorkingDirectory` - pwd, i.e. 'cd into'.
   ---  `Runtime`, `State`, `Cache`, `Logs`, `Configuration` - set corresponding env vars and create dirs under some special paths.
**** Tips
     - ( ) {https://nixos.wiki/wiki/Systemd_Hardening}[Source].
     - if networm needed with nm present, do 
       @code nix
       wants = [ 'NetworkManager-wait-online.service' ];
       after = [ 'NetworkManager-wait-online.service' ];
       @end
*** Timers
   {https://nixos.wiki/wiki/Systemd/Timers}[Source].
   {https://search.nixos.org/options?channel=23.11&from=0&size=50&sort=relevance&type=packages&query=systemd.timers.%3Cname%3E}[Options].
    Important options:
    - `serviceConfig.OnCalendar` - when. Kinda like chrone's format but different.
**** Example
     @code nix
     systemd.timers."hello-world" = {
       wantedBy = [ "timers.target" ];
         timerConfig = {
           OnBootSec = "5m";
           OnUnitActiveSec = "5m";
           Unit = "hello-world.service";
         };
     };

     systemd.services."hello-world" = {
       script = ''
         set -eu
         ${pkgs.coreutils}/bin/echo "Hello World"
       '';
       serviceConfig = {
         Type = "oneshot";
         User = "root";
       };
     };
     @end
**** Commands
     - `systemctl list-timers` - list active timers and their current state,
     - `systemctl start hello-world` - manually run a service once for testing purposes.
** Examples
   - {:dotfiles-updater:}.

* Installers
  There are a couple installers and you can build your own.
  To create an installer provide a configuration through a flake or a nix file, which has some module from `${modulesPath}/installer/` as import. E.g. `${modulesPath}/installer/cd-dvd/installation-cd-minimal.nix` - the one you would most commonly use.
  Building configurations can be done with `nixos-generate --flake .#installer --format iso -o result` from `nixos-generators`.

* Rerences
  - {:flake-parts:}
  - {:nix/merging-patches:}
  - {:nixops:}
  - {:refresher:}
  - {:stylix:}
