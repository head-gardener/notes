* Impermanence
  {https://www.youtube.com/watch?v=s2fkgkN55vk}[Video].
  Speakers: Kim Lindberger (@talyz).
  To boot NixOS you only need `/boot` and `/nix` - everything else can be impermanent.
  What do you need:
** Ephemeral volumes.
   There are a couple ways:
*** `tmpfs`
    - easiest way.
    - memory is limited.
    - power loss will ruin impermanent data.
*** `btrfs` subvols
    - for example create a new vol on every boot.
    - you need a script in `boot.initrd.postDeviceCommands = lib.mkAfter`.
    - the sctipt will mount vols, move old subvols to storage, timestamp them, remove anything older-than.
** Persistent volumes.
   This should include mounts, needed on boot.
   E.g.`boot`, `nix`.
** Persistence modules.
   `nixosModules.impermanence`, or anything similar.
   Use `environment.persistence` to declare persistent files.
   @code nix
   {
     environment.persitance.main = {
       persistentStoragePath = "/persistent";
       direcotries = [
         "/var/log"
       ];
       files = [
         "/etc/machine-id"
         { file = "/etc/machine-id"; user = "user"; group = "group"; };
       ];
     };
   }
   @end
   Home manager module also exists, you can use it to have persistent documents, downloads and what not.
   It uses bind mounts and symlinks. First are preferable.
*** Symlinks vs bind mounts
   $ bind mounts
    You can mount files with `mount --bind`. This can be usable for accessing files on a drive from multiple places, even when some of their paths are hidden by other mount commands, accessing files in chroot env, etc..

    Bind mounts can't really point to non-existent files, but are otherwise more secure.

** Questions
   - sensible defaults for services are currently being worked on.
   - impermanence can be used to create more succinct snapshots of home.
   - bind mounts can be used across file systems, so LUKS shouldn't be an issue.
   - you can have impermanent store, but be careful.

* What Flakes needs (technically)
  {https://www.youtube.com/watch?v=UHhnG4rbvzo}[Video].
  Speaker: Linux Heckermann.
** Requirements
   Flake have became more popular than `default.nix` in new repos, which introduces a problem for new technical solutions. The main idea is to have  newer versions of nix preserve older flakes but reject newer unless action is taken.
   Flakes need *discoverability*. Registry does that, but not enough.
   Flakes' outputs have to be *enumerable*.
** Lazy trees
   {https://github.com/NixOS/nix/pull/6530}[PR].
   Flakes are copied wholesale when evaluated. Lazy trees introduces a number of mechanisms for lazily copying files into store.
** Pure mode
   Stricter `--pure`.
   CLI flag, banning registry and other impure convenience stuff.
   Probably an env flag.
** Flakes options
   Configurations, options - similarly to modules. This can help with systems, overlays - i.e. changing outputs on the fly with a native flakes interface
   E.g. `allowUnfree` in `nixpkgs` flake.
   The design is currently being worked on.
** Dependency resolution
   Packages from `nixpkgs` approx. 4 weeks apart have no shared dependencies.
   Every `nixpkgs` uncompressed is about 190 MB - and flakes suffer from heavy dependency creep. `follows` is more of a hack than a solution.
   To combat that we can implement something for:
   - ignoring downstream locks.
   - deactivating registries.
   - BYOR (bring your own registry).
   - matching resolution.
     Nix allows for independent `locked` and `original` values in a lock file - i.e. for definition and resulting version being unrelated. This will allow users to implement their own dependency resolution algorithms.
** `outPath`
   Flakes export their `outPath`, which is dangerous. It's often used for configuring `nixpkgs`. This attribute can be disabled globally and enabled per-flake.

* Tvix
  {https://www.youtube.com/watch?v=j67prAPYScY}[Video].
